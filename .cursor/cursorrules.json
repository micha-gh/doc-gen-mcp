{
  "name": "doc-gen-mcp Cursorrules",
  "version": "1.1.0",
  "description": "Cursor rules for the doc-gen-mcp documentation generator",
  "author": "doc-gen-mcp Team",
  "project": "doc-gen-mcp",
  "repository": "https://github.com/micha-gh/doc-gen-mcp",
  "metadata": {
    "lastUpdated": "2023-07-06",
    "releaseNotes": "Integration der neuen Wartungsplan-Anforderungen und Verbesserung der Befehle für JavaScript zu TypeScript Migration"
  },
  "commands": [
    {
      "name": "Generate AI Documentation (OpenAI)",
      "command": "bin/gendoc.js --input ${fileDirname} --output ./docs/ai-doc-${fileBasenameNoExt}.md --ai --ai-provider openai --openai-key $OPENAI_API_KEY",
      "description": "Generiere Dokumentation für den aktuellen Ordner mit OpenAI"
    },
    {
      "name": "Generate AI Documentation (Claude)",
      "command": "bin/gendoc.js --input ${fileDirname} --output ./docs/ai-doc-${fileBasenameNoExt}.md --ai --ai-provider anthropic --anthropic-key $ANTHROPIC_API_KEY",
      "description": "Generiere Dokumentation für den aktuellen Ordner mit Anthropic Claude"
    },
    {
      "name": "Generate Doc for Current File",
      "command": "bin/gendoc.js --input ${file} --output ./docs/${fileBasenameNoExt}.md",
      "description": "Generiere Dokumentation für die aktuelle Datei"
    },
    {
      "name": "Export to Confluence",
      "command": "bin/gendoc.js --input ${fileDirname} --confluence --page-title \"${fileBasenameNoExt} Dokumentation\"",
      "description": "Exportiere Dokumentation nach Confluence"
    },
    {
      "name": "Build TypeScript",
      "command": "npm run build",
      "description": "TypeScript kompilieren"
    },
    {
      "name": "Run Tests",
      "command": "npm test",
      "description": "Alle Tests ausführen"
    },
    {
      "name": "Update Dependencies",
      "command": "npm outdated && echo 'Run: npm update' to update non-major versions",
      "description": "Zeige veraltete Abhängigkeiten"
    },
    {
      "name": "Lint Check",
      "command": "npx eslint .",
      "description": "Lint-Check für das gesamte Projekt"
    },
    {
      "name": "Create Exporter Plugin",
      "command": "mkdir -p src/exporters/${input:exporterName}Exporter && cp src/templates/exporter-template.ts src/exporters/${input:exporterName}Exporter.ts && code src/exporters/${input:exporterName}Exporter.ts",
      "description": "Neues Exporter-Plugin erstellen"
    },
    {
      "name": "Test Exporter Plugin",
      "command": "npm run build && bin/gendoc.js --input test/samples/sample-entries.json --export-format ${input:exporterName}",
      "description": "Exporter-Plugin testen"
    },
    {
      "name": "Show Project Structure",
      "command": "find . -type f -not -path \"./node_modules/*\" -not -path \"./dist/*\" | sort",
      "description": "Zeige die Projektstruktur ohne node_modules und dist"
    },
    {
      "name": "Project Health Check",
      "command": "echo 'Checking dependencies...' && npm outdated && echo 'Running tests...' && npm test",
      "description": "Führe einen Health-Check des Projekts durch"
    },
    {
      "name": "Fix initializeExporters",
      "command": "sed -i '' -e '/import initializeExporters/a\\initializeExporters();' bin/gendoc.js || echo 'Funktion bereits hinzugefügt oder nicht gefunden'",
      "description": "Korrigiere die fehlende initializeExporters-Funktion in bin/gendoc.js"
    },
    {
      "name": "Migrate JS to TS",
      "command": "cp ${file} ${fileDirname}/${fileBasenameNoExt}.ts && code ${fileDirname}/${fileBasenameNoExt}.ts",
      "description": "Migriere eine JavaScript-Datei zu TypeScript"
    },
    {
      "name": "Migration Progress",
      "command": "echo 'JS Files:' && find lib -name '*.js' | wc -l && echo 'TS Files:' && find src -name '*.ts' | wc -l",
      "description": "Zeige den Fortschritt der JS zu TS Migration"
    },
    {
      "name": "Initialize New Template",
      "command": "cp -r src/templates/exporter-template src/exporters/${input:exporterName}Exporter",
      "description": "Initialisiere einen neuen Exporter aus einem Template-Verzeichnis"
    },
    {
      "name": "Generate HTML Documentation",
      "command": "bin/gendoc.js --input ${fileDirname} --output ./docs/${fileBasenameNoExt}.html --export-format html",
      "description": "Generiere HTML-Dokumentation für den aktuellen Ordner"
    },
    {
      "name": "Generate PDF Documentation",
      "command": "bin/gendoc.js --input ${fileDirname} --output ./docs/${fileBasenameNoExt}.pdf --export-format pdf",
      "description": "Generiere PDF-Dokumentation für den aktuellen Ordner"
    },
    {
      "name": "Test All Exporters",
      "command": "for exporter in $(node -e \"console.log(require('./dist/core/plugins/ExporterManager.js').exporterManager.getAvailableExporters().join(' '))\"); do echo \"Testing $exporter exporter...\" && bin/gendoc.js --input test/samples/sample-entries.json --export-format $exporter --output ./test-output/$exporter-output; done",
      "description": "Teste alle verfügbaren Exporter"
    },
    {
      "name": "Find Missing JSDoc",
      "command": "grep -r --include=\"*.ts\" -L \"/**\" src/ | grep -v \"index.ts\"",
      "description": "Finde TypeScript-Dateien ohne JSDoc-Kommentare"
    },
    {
      "name": "Generate Maintenance Report",
      "command": "echo '# Wartungs-Status\n\n## JS zu TS Migration\n' > maintenance-status.md && echo '- JS Files: ' >> maintenance-status.md && find lib -name '*.js' | wc -l >> maintenance-status.md && echo '- TS Files: ' >> maintenance-status.md && find src -name '*.ts' | wc -l >> maintenance-status.md && echo '\n## Test-Abdeckung\n' >> maintenance-status.md && echo '- Testdateien: ' >> maintenance-status.md && find test -name '*.test.*' | wc -l >> maintenance-status.md && echo '\n## Abhängigkeiten\n' >> maintenance-status.md && npm outdated >> maintenance-status.md",
      "description": "Generiere einen aktuellen Wartungsbericht als Markdown-Datei"
    },
    {
      "name": "Create Missing Type Definitions",
      "command": "for f in $(find lib -name '*.js'); do ts_file=\"src/$(echo $f | sed 's/lib\\///' | sed 's/\\.js$/.ts/')\"; mkdir -p $(dirname $ts_file); [ ! -f $ts_file ] && echo \"// Type definitions for $f\n\n// TODO: Convert this file from JavaScript to TypeScript\" > $ts_file && echo \"Created $ts_file\"; done",
      "description": "Erstelle fehlende TypeScript-Definitionsdateien für JavaScript-Files"
    },
    {
      "name": "Validate Config Schema",
      "command": "node -e \"const fs = require('fs'); const config = JSON.parse(fs.readFileSync('${input:configFile}', 'utf-8')); console.log('Config schema valid:', !!config); console.log(config);\"",
      "description": "Validiere ein Konfigurations-Schema"
    }
  ],
  "readme": "# Cursor Rules für doc-gen-mcp\n\nDiese Datei enthält Regeln für die Entwicklung im doc-gen-mcp Projekt mit der Cursor IDE.\n\n## Verwendung\n\n1. Die Regeln werden automatisch in Cursor geladen, wenn das Projekt geöffnet wird\n2. Regeln sind nach Kategorien geordnet und haben verschiedene Schweregrade (error, warning, info)\n3. Jede Regel hat ein Beispiel zur korrekten Implementierung\n\n## Kategorien\n\n- **Exporter Implementation**: Regeln für die Implementierung von Exporter-Plugins\n- **Documentation**: Regeln zur Dokumentation und Kommentierung\n- **Code Style**: Regeln zum Coding-Style und Best Practices\n- **Testing**: Regeln für Tests und Test-Coverage\n- **Project Management**: Regeln für Projektdokumentation und -verwaltung\n- **Best Practices**: Best Practices für die Implementierung von Exportern\n\n## Schweregrade\n\n- **error**: Muss behoben werden\n- **warning**: Sollte behoben werden\n- **info**: Empfehlung zur Verbesserung",
  "categories": [
    {
      "name": "Exporter Implementation",
      "description": "Regeln für die Implementierung von Exporter-Plugins"
    },
    {
      "name": "Documentation",
      "description": "Regeln zur Dokumentation und Kommentierung"
    },
    {
      "name": "Code Style",
      "description": "Regeln zum Coding-Style und Best Practices"
    },
    {
      "name": "Testing",
      "description": "Regeln für Tests und Test-Coverage"
    },
    {
      "name": "Project Management",
      "description": "Regeln für Projektdokumentation und -verwaltung"
    },
    {
      "name": "Best Practices",
      "description": "Best Practices für die Implementierung von Exportern und die Projektstruktur"
    },
    {
      "name": "Wartungsplan",
      "description": "Regeln zur Einhaltung des Wartungsplans und Migration von JavaScript zu TypeScript"
    }
  ],
  "rules": [
    {
      "category": "Exporter Implementation",
      "name": "Exporter Plugin Implementation",
      "pattern": "class \\w+Exporter extends BaseExporter",
      "description": "Exporter plugins müssen von BaseExporter erben und die Standardmethoden implementieren: isConfigured, export, loadConfig, und validateContent.",
      "severity": "error",
      "example": "class MarkdownExporter extends BaseExporter { ... }",
      "requiresImplementation": [
        "isConfigured(): Promise<boolean>",
        "export(content: ExportContent, options?: ExportOptions): Promise<ExportResult>",
        "loadConfig(configPath?: string): Promise<any>",
        "validateContent(content: ExportContent): Promise<{valid: boolean; issues?: Array<{message: string; severity: string}>;}>",
        "name: string",
        "description: string",
        "supportedFormats: string[]",
        "defaultConfigPath: string"
      ]
    },
    {
      "category": "Exporter Implementation",
      "name": "Exporter Plugin Configuration",
      "pattern": "(/config/\\w+\\.json)",
      "description": "Jeder Exporter sollte eine zugehörige Konfigurationsdatei im config-Verzeichnis haben.",
      "severity": "warning",
      "example": "/config/markdown-exporter.json"
    },
    {
      "category": "Exporter Implementation",
      "name": "Export Content Validation",
      "pattern": "validateContent\\(content: ExportContent\\):",
      "description": "Die Validierungsmethode sollte die Inhalte auf erforderliche Felder überprüfen und entsprechende Fehlermeldungen zurückgeben.",
      "severity": "error",
      "example": "validateContent(content: ExportContent): Promise<{valid: boolean; issues?: Array<{message: string; severity: string}>;}> { ... }"
    },
    {
      "category": "Exporter Implementation",
      "name": "Plugin Registration",
      "pattern": "registerExporter\\(",
      "description": "Exporter-Plugins müssen beim ExporterManager registriert werden, um im System verwendet zu werden.",
      "severity": "error",
      "example": "exporterManager.registerExporter(new MarkdownExporter());"
    },
    {
      "category": "Exporter Implementation",
      "name": "Config Path Resolution",
      "pattern": "path\\.resolve\\(process\\.cwd\\(\\), 'config'",
      "description": "Konfigurationspfade sollten relativ zum Projektverzeichnis aufgelöst werden.",
      "severity": "warning",
      "example": "const configPath = path.resolve(process.cwd(), 'config', 'exporter.json');"
    },
    {
      "category": "Exporter Implementation",
      "name": "Exporter Naming Conventions",
      "pattern": "class (\\w+)Exporter",
      "description": "Exporter-Klassen sollten nach dem Schema '[Format]Exporter' benannt werden (z.B. MarkdownExporter, HTMLExporter).",
      "severity": "warning",
      "example": "class PDFExporter extends BaseExporter { ... }"
    },
    {
      "category": "Exporter Implementation",
      "name": "Format Support Declaration",
      "pattern": "supportedFormats\\s*=\\s*\\[",
      "description": "Exporter sollten explizit ihre unterstützten Formate deklarieren.",
      "severity": "error",
      "example": "supportedFormats = ['markdown', 'md'];"
    },
    {
      "category": "Documentation",
      "name": "Exporter Documentation",
      "pattern": "(/docs/\\w+-exporter-usage\\.md)",
      "description": "Jeder Exporter sollte eine Dokumentation im docs-Verzeichnis haben, die seine Verwendung erklärt.",
      "severity": "info",
      "example": "/docs/markdown-exporter-usage.md"
    },
    {
      "category": "Documentation",
      "name": "Method Documentation",
      "pattern": "/\\*\\*[\\s\\S]*?\\*/",
      "description": "Öffentliche Methoden sollten mit JSDoc-Kommentaren dokumentiert sein.",
      "severity": "warning",
      "example": "/**\n * Exportiert Inhalte in das Markdown-Format\n * @param {ExportContent} content - Der zu exportierende Inhalt\n * @returns {Promise<ExportResult>} Das Ergebnis des Exports\n */"
    },
    {
      "category": "Documentation",
      "name": "Markdown Formatting",
      "pattern": "(##+)\\s+([\\w\\s]+)",
      "description": "Markdown-Dateien sollten eine konsistente Überschriftenstruktur verwenden.",
      "severity": "info",
      "example": "## Überschrift Ebene 2\n### Unterabschnitt"
    },
    {
      "category": "Documentation",
      "name": "CLI Command Documentation",
      "pattern": "--[\\w-]+",
      "description": "CLI-Kommandos sollten konsistent formatiert sein und in der Dokumentation erklärt werden.",
      "severity": "warning",
      "example": "--export-format=markdown"
    },
    {
      "category": "Documentation",
      "name": "Documentation Generation",
      "pattern": "generateDocsFrom\\w+",
      "description": "Dokumentations-Generierungsfunktionen sollten strukturierte Daten akzeptieren und Validierung durchführen.",
      "severity": "warning",
      "example": "generateDocsFromSchema(schema, options)"
    },
    {
      "category": "Code Style",
      "name": "TypeScript Type Definitions",
      "pattern": "interface \\w+",
      "description": "Komplexe Datenstrukturen sollten als TypeScript-Interfaces definiert werden.",
      "severity": "warning",
      "example": "interface ExportOptions {\n  outputPath: string;\n  format: string;\n}"
    },
    {
      "category": "Code Style",
      "name": "Error Handling",
      "pattern": "try {[\\s\\S]*?} catch \\(err\\) {",
      "description": "Operationen sollten in try-catch-Blöcken durchgeführt werden, um Fehler zu behandeln und sinnvolle Fehlermeldungen zurückzugeben.",
      "severity": "warning",
      "example": "try {\n  await exporter.export(content);\n} catch (err) {\n  console.error('Export fehlgeschlagen:', err.message);\n}"
    },
    {
      "category": "Code Style",
      "name": "ESM Module Import",
      "pattern": "import {[^}]*} from '[^']+\\.js';",
      "description": "Imports sollten die .js-Erweiterung beibehalten, auch wenn die Dateien TypeScript sind, da das Projekt ESM Module verwendet.",
      "severity": "error",
      "example": "import { BaseExporter } from '../core/base-exporter.js';"
    },
    {
      "category": "Code Style",
      "name": "Async/Await Pattern",
      "pattern": "async [\\w\\s]+\\([^)]*\\)\\s*{",
      "description": "Asynchrone Funktionen sollten das async/await Pattern verwenden, statt Promise-Chains.",
      "severity": "warning",
      "example": "async export(content: ExportContent): Promise<ExportResult> {\n  const result = await this.transform(content);\n  return result;\n}"
    },
    {
      "category": "Code Style",
      "name": "Destructuring Assignment",
      "pattern": "const {[^}]*} = ",
      "description": "Verwende Destructuring für bessere Lesbarkeit beim Zugriff auf Objekteigenschaften.",
      "severity": "info",
      "example": "const { title, sections, metadata } = content;"
    },
    {
      "category": "Testing",
      "name": "Test Coverage for Exporters",
      "pattern": "(/test/exporters/\\w+\\.test\\.mjs)",
      "description": "Jeder Exporter sollte entsprechende Tests im test/exporters Verzeichnis haben.",
      "severity": "warning",
      "example": "/test/exporters/markdown-exporter.test.mjs"
    },
    {
      "category": "Testing",
      "name": "Test Mocking",
      "pattern": "jest\\.mock\\(",
      "description": "Tests sollten externe Abhängigkeiten mocken, um keine realen externen Ressourcen zu nutzen.",
      "severity": "info",
      "example": "jest.mock('fs', () => ({\n  promises: {\n    writeFile: jest.fn().mockResolvedValue(undefined)\n  }\n}));"
    },
    {
      "category": "Testing",
      "name": "Test Assertions",
      "pattern": "expect\\([^)]+\\)\\.(to|not)\\.",
      "description": "Tests sollten klare Assertions verwenden, um erwartetes Verhalten zu überprüfen.",
      "severity": "warning",
      "example": "expect(result.success).toBe(true);"
    },
    {
      "category": "Project Management",
      "name": "CHANGELOG Updates",
      "pattern": "## \\[Unreleased\\]",
      "description": "Bei Hinzufügen neuer Features oder Bugfixes sollte der CHANGELOG unter [Unreleased] aktualisiert werden.",
      "severity": "info",
      "example": "## [Unreleased]\n- Hinzufügen des Markdown-Exporters mit Unterstützung für Tabellen und Codeblöcke"
    },
    {
      "category": "Project Management",
      "name": "Documentation Update Check",
      "pattern": "(CHANGELOG\\.md|README\\.md)",
      "description": "Bei signifikanten Änderungen (neue Features, Bugfixes, API-Änderungen) müssen CHANGELOG.md und README.md aktualisiert werden, bevor ein Commit erfolgt.",
      "severity": "warning",
      "example": "## [Unreleased]\n### Added\n- PDF Exporter mit Unterstützung für Cover-Seiten und Inhaltsverzeichnis"
    },
    {
      "category": "Project Management",
      "name": "Roadmap Updates",
      "pattern": "Implementation Roadmap",
      "description": "Bei Abschluss von Features sollte diese in der Implementation Roadmap als abgeschlossen markiert werden.",
      "severity": "info",
      "example": "- [x] Implementierung des HTML-Exporters mit Template-Unterstützung"
    },
    {
      "category": "Best Practices",
      "name": "Template Configuration",
      "pattern": "(template|templates):\\s*\\{",
      "description": "Für Exporter, die Templates unterstützen, sollten Konfigurationsoptionen für Templates angeboten werden.",
      "severity": "info",
      "example": "templates: {\n  default: './templates/default.hbs',\n  custom: './templates/custom.hbs'\n}"
    },
    {
      "category": "Best Practices",
      "name": "Locale Support",
      "pattern": "(locale|language):\\s*['\"](\\w+)['\"]",
      "description": "Exporter sollten Unterstützung für verschiedene Sprachen anbieten, wo es sinnvoll ist.",
      "severity": "info",
      "example": "locale: 'de-DE'"
    },
    {
      "category": "Best Practices",
      "name": "Filesystem Operations",
      "pattern": "fs\\.(write|read)",
      "description": "Bei Dateisystemoperationen sollte immer die Promise-basierte API verwendet werden.",
      "severity": "warning",
      "example": "await fs.promises.writeFile(outputPath, content);"
    },
    {
      "category": "Wartungsplan",
      "name": "JS zu TS Migration",
      "pattern": "\\.js$",
      "filePattern": "^lib/.*\\.js$",
      "description": "JavaScript-Dateien im lib-Verzeichnis sollten zu TypeScript migriert werden.",
      "severity": "warning",
      "example": "Konvertiere lib/utils.js zu src/utils.ts mit korrekten Typdefinitionen."
    },
    {
      "category": "Wartungsplan",
      "name": "TypeScript Typdefinitionen",
      "pattern": ":\\s*(\\w+)(?:\\[\\])?",
      "filePattern": "^src/.*\\.ts$",
      "description": "TypeScript-Dateien sollten vollständige Typdefinitionen enthalten.",
      "severity": "warning",
      "example": "function processData(data: InputData): OutputData { ... }"
    },
    {
      "category": "Wartungsplan",
      "name": "JSDoc Vollständigkeit",
      "pattern": "/\\*\\*[\\s\\S]*?@param[\\s\\S]*?@returns[\\s\\S]*?\\*/",
      "filePattern": "^src/.*\\.(ts|js)$",
      "description": "JSDoc-Kommentare sollten Parameter und Rückgabewerte dokumentieren.",
      "severity": "info",
      "example": "/**\n * Konvertiert Einträge in das Markdown-Format\n * @param {Entry[]} entries - Die zu konvertierenden Einträge\n * @param {FormatOptions} options - Formatierungsoptionen\n * @returns {string} Formatierter Markdown-Text\n */"
    },
    {
      "category": "Wartungsplan",
      "name": "Initialize Exporters Fix",
      "pattern": "initializeExporters\\(\\);",
      "filePattern": "^bin/gendoc\\.js$",
      "description": "Die fehlende initializeExporters-Funktion muss in bin/gendoc.js aufgerufen werden.",
      "severity": "error",
      "example": "import initializeExporters from '../src/init/registerExporters.js';\n// ...\ninitializeExporters();"
    }
  ],
  "ignorePatterns": [
    "node_modules/",
    "dist/",
    ".git/"
  ]
} 